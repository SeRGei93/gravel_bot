package services

import (
	"fmt"
	"gravel_bot/internal/config"
	"gravel_bot/internal/database"
	"gravel_bot/internal/database/table"
	"log/slog"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func Start(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	text := `
	<b>–ö–ê–ú–ù–ò 200 üî• 18+</b>
	16‚Äì30 –∏—é–Ω—è

	–ì—Ä–∞–≤–∏–π–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç 200 –∫–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–Ω–∫–∏/–±—Ä–µ–≤–µ—Ç–∞/–ø–æ–∫–∞—Ç—É—Ö–∏ ‚Äî –∫–æ–º—É —á—Ç–æ –±–ª–∏–∂–µ. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ —É—Å–ª–æ–≤–∏–∏ —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –í –∑–∞—á—ë—Ç –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç—Ä–∞–≤–∞-—Ç—Ä–µ–∫–∏ —Å –æ–∫–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å 16 –ø–æ 30 –∏—é–Ω—è 2025 –≥–æ–¥–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.

	<b>–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í</b> –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

	<b>–ü–†–ò–ó–û–í–û–ô –§–û–ù–î</b> —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–∞–º–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –ø—Ä–µ—Ç–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∏–∑—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ —Å–¥–µ–ª–∞–ª –≤–∫–ª–∞–¥. –°—Ç–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –ª—é–±—ã–µ –Ω–æ–≤—ã–µ –≤–µ—â–∏ –Ω–∞ –ª—é–±–æ–µ –º–µ—Å—Ç–æ –ª–∏–±–æ —É—Å–ª–æ–≤–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: –≤–µ–¥—Ä–æ —Ä–∞–∫–æ–≤ –Ω–∞ 75 –º–µ—Å—Ç–æ, –ø—Ä–æ–µ–∑–¥–Ω–æ–π –Ω–∞ —Ç—Ä–∞–º–≤–∞–π –ø–æ–ª–æ–º–∞–≤—à–µ–º—É –≤–µ–ª–∏–∫, –ø–∞—á–∫–∞ –º–∏–Ω–µ—Ä–∞–ª–∫–∏ —Ç–æ–º—É, –∫—Ç–æ –ø–æ—Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ ‚Äî –¥–∞–π—Ç–µ –≤–æ–ª—é —Ñ–∞–Ω—Ç–∞–∑–∏–∏. –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–≤–∞—Ä—Ç–∏—Ä—É. –õ—é–±–æ–π –¥–æ–Ω–∞—Ç –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫ –¥–∞–Ω—å —É–≤–∞–∂–µ–Ω–∏—è –≥—Ä–∞–≤–∏–π–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É.

	<b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –°–ù–ê–†–Ø–ñ–ï–ù–ò–ï:</b> –∏—Å–ø—Ä–∞–≤–Ω—ã–π –≤–µ–ª–∏–∫, —à–ª–µ–º, —Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç, –ø–∏—Ç–∞–Ω–∏–µ, –≤–æ–¥–∞, –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –∞–ø—Ç–µ—á–∫–∞, –ø–µ—Ä–µ–¥–Ω–∏–π –∏ –∑–∞–¥–Ω–∏–π —Å–≤–µ—Ç.
	–õ–µ–≥–µ–Ω–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞: 70% –Ω–µ–∞—Å—Ñ–∞–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å.

	üó∫ <b>–ú–ê–†–®–†–£–¢:</b> <a href="https://ehai.club/kamni/Kamni200_2025_v1.gpx">GPX</a> | <a href="https://nakarte.me/#m=10/54.26482/27.30927&l=Y&nktl=JBZ7YVT6aBOO5xd2fESKEQ">Nakarte</a>
	‚ùóÔ∏è–î–æ —Å—Ç–∞—Ä—Ç–∞ –≤–æ–∑–º–æ–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è

	‚ÄºÔ∏è <a href="https://t.me/kamnigravel/7697">–£–°–õ–û–í–ò–Ø –£–ß–ê–°–¢–ò–Ø</a>
	üçì <a href="https://t.me/kamnigravel/7698">–ü–†–ò–ó–û–í–û–ô –§–û–ù–î</a>
	üì£ <a href="http://t.me/kamnigravel">–ß–∞—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</a>
	`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	buttons, err := addButtons(update.Message, "kamni200", db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}
	msg.ParseMode = "HTML"

	bot.Send(msg)
}

func Rules(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	const text = `<b>–£–°–õ–û–í–ò–Ø –£–ß–ê–°–¢–ò–Ø (–î–ò–°–ö–õ–ï–ô–ú–ï–†) ‚ÄºÔ∏è</b>

–î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≥—Ä–∞–≤–∏–π–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ 200‚Äì300 –∫–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª—ë–≥–∫–æ–π –ø—Ä–æ–≥—É–ª–∫–æ–π –∏ —Ç—Ä–µ–±—É–µ—Ç —Ö–æ—Ä–æ—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∏ –º–æ—Ä–∞–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è –∏ –ø–∏—Ç—å—è, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞, –æ–∫–∞–∑–∞–Ω–∏—è –º–µ–¥–ø–æ–º–æ—â–∏ –∏ —ç–≤–∞–∫—É–∞—Ü–∏–∏ —Å–µ–±—è. 

–£—á–∞—Å—Ç–∏–µ –≤ –ö–ê–ú–ù–Ø–• –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:

<b>1. –£—á–∞—Å—Ç–Ω–∏–∫–∏</b>: 18+, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤–∑–Ω–æ—Å –≤ –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –∏ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Strava). –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —É —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–æ–µ—Ö–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é.

<b>2. –ü–∏—Ç–∞–Ω–∏–µ –∏ –ø–∏—Ç—å—ë üçºüçî</b>: —Å–∞–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—à—å —Å–µ–±—è. –£–ø–æ—Ç—Ä–µ–±–ª—è–π 50‚Äì100 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ –≤ —á–∞—Å, –Ω–µ–º–Ω–æ–≥–æ –±–µ–ª–∫–∞. –ü–µ–π –∫–∞–∂–¥—ã–µ 15‚Äì20 –º–∏–Ω. –ò–º–µ–π –∑–∞–ø–∞—Å –≤–æ–¥—ã –∏ –µ–¥—ã, –ø–æ–ø–æ–ª–Ω—è–π –ø–æ —Ö–æ–¥—É.

<b>3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ü§å</b>: —Ç–≤–æ—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –û–±—è–∑–∞—Ç–µ–ª–µ–Ω —à–ª–µ–º, —Ä–∞–±–æ—á–∏–π –≤–µ–ª–∏–∫, —Ñ–æ–Ω–∞—Ä–∏, –∞–ø—Ç–µ—á–∫–∞, –¥–µ–Ω—å–≥–∏. –ù–µ —Å—Ç–∞—Ä—Ç—É–π, –µ—Å–ª–∏ –±–æ–ª–µ–Ω. –ü—Ä–∏ –ø–µ—Ä–µ–≥—Ä–µ–≤–µ ‚Äî –æ—Ö–ª–∞–∂–¥–∞–π—Å—è. –ü—Ä–∏ –ø–ª–æ—Ö–æ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ ‚Äî —Å–æ–π—Ç–∏.

<b>4. –ü–î–î –∏ –∑–∞–∫–æ–Ω—ã üöó</b>: —Å–æ–±–ª—é–¥–∞–π –ü–î–î –∏ –∑–∞–∫–æ–Ω—ã –†–ë. –ü–æ–ª–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –Ω–∞ —Ç–µ–±–µ.

<b>5. –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ üßö‚Äç‚ôÄÔ∏è</b>: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–±—è. –ò–º–µ–π –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: 103, 112, 102. –ü–∏—à–∏ –≤ —á–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.

<b>6. –°—Ö–æ–¥ —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ ‚õîÔ∏è</b>: –¥–æ–±–∏—Ä–∞–µ—à—å—Å—è —Å–∞–º. –¢–∞–∫—Å–∏, –¥—Ä—É–∑—å—è, –ø–æ–ø—É—Ç–∫–∏, –ñ–î ‚Äî —Å–∞–º —Ä–µ—à–∞–µ—à—å.

<b>7. –†–µ–º–æ–Ω—Ç –∏ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ üö¥‚Äç‚ôÄÔ∏è</b>: –∏—Å–ø—Ä–∞–≤–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–∞–º–µ—Ä—ã, –ª–∞—Ç–∫–∏, —á–µ—Ä–≤—è–∫–∏. –ü—Ä–æ–∫–æ–ª—ã ‚Äî –¥–µ–ª–æ –æ–±—ã—á–Ω–æ–µ.

<b>8. –ù–∞–≤–∏–≥–∞—Ü–∏—è üèû</b>: —Å–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—à—å—Å—è, —Å–ª–µ–¥—É–µ—à—å —Ç—Ä–µ–∫—É. –ó–∞—Ä—è–∂–∞–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, —Ä–∞–∑–º–µ—Ç–∫–∏ –Ω–µ—Ç.

<b>9. –ù–æ–≤–∏—á–∫–∞–º üç¨</b>: –µ–∑–∂–∞–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –≤–µ—Å–µ–ª–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ, –ø—Ä–æ—â–µ.

<b>10. –†–∏—Å–∫–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ü§å</b>: —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—É—Ç. –£—á–∞—Å—Ç–≤—É—è ‚Äî —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.`

	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, text)
	buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}

	msg.ParseMode = "HTML"
	if _, err := bot.Send(msg); err != nil {
		slog.Error(err.Error())
	}
}

func SetBike(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	from := update.CallbackQuery.Message.Chat
	userID := from.ID

	// –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –∏–º–µ–Ω–∏
	event, err := db.Event.FindEventByName("kamni200")
	if err != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	application, _ := db.UserEvent.FindUserToEvent(userID, event.ID)
	if application != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	text := "–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ–ª–æ—Å–∏–ø–µ–¥"
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, text)

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ì—Ä–∞–≤–∏–π–Ω–∏–∫", "type=gravel"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–¢–ë", "type=mtb"),
			tgbotapi.NewInlineKeyboardButtonData("–§–∏–∫—Å", "type=fixedgear"),
			tgbotapi.NewInlineKeyboardButtonData("–®–æ—Å—Å–µ–π–Ω–∏–∫", "type=gay"),
		),
	)

	if _, err := bot.Send(msg); err != nil {
		slog.Error(err.Error())
	}
}

func Kamni200(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot, bike string) {
	from := update.CallbackQuery.Message.Chat
	userID := from.ID

	// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	_ = db.User.CreateUser(table.User{
		ID:        userID,
		NickName:  from.UserName,
		FirstName: from.FirstName,
		LastName:  from.LastName,
	})

	// –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –∏–º–µ–Ω–∏
	event, err := db.Event.FindEventByName("kamni200")
	if err != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	application, _ := db.UserEvent.FindUserToEvent(userID, event.ID)
	if application != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
	err = db.UserEvent.RegisterUserToEvent(userID, event.ID, true, bike)
	if err != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	// –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := "–°–ø–∞—Å–∏–±–æ. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ üî•"
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, text)
	buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}
	if _, err := bot.Send(msg); err != nil {
		slog.Error(err.Error())
	}

	notification := tgbotapi.NewMessage(cfg.AdminChat, fmt.Sprintf("üö¥ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: %s (@%s) \n–¢–∏–ø: %s",
		from.FirstName+" "+from.LastName,
		from.UserName,
		bike,
	))

	if _, err := bot.Send(notification); err != nil {
		slog.Error(err.Error())
	}
}

func Kamni200Off(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	from := update.CallbackQuery.Message.Chat
	userID := from.ID

	err := db.User.DeleteUser(userID)
	if err != nil {
		slog.Error(err.Error())
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	// –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –ø–æ –∏–º–µ–Ω–∏
	event, err := db.Event.FindEventByName("kamni200")
	if err != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	err = db.UserEvent.UnRegisterUserToEvent(userID, event.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
		if err == nil {
			msg.ReplyMarkup = buttons
		}
		bot.Send(msg)
		return
	}

	// –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, text)
	buttons, err := addButtons(update.CallbackQuery.Message, "kamni200", db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}
	if _, err := bot.Send(msg); err != nil {
		slog.Error(err.Error())
	}
}

func addButtons(message *tgbotapi.Message, eventName string, db database.Database, cfg config.Bot) (*tgbotapi.InlineKeyboardMarkup, error) {
	from := message.Chat
	userID := from.ID

	var buttons []tgbotapi.InlineKeyboardButton
	buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData("‚ÄºÔ∏è –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è", "rules"))
	buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonURL("üö¥‚Äç‚ôÄÔ∏è –ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "http://t.me/kamnigravel"))

	event, err := db.Event.FindEventByName(eventName)
	if err != nil {
		return nil, err
	}

	var buttons2 []tgbotapi.InlineKeyboardButton
	application, _ := db.UserEvent.FindUserToEvent(userID, event.ID)
	if application == nil {
		buttons2 = append(buttons2, tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", "kamni200"))
	} else {
		buttons2 = append(buttons2, tgbotapi.NewInlineKeyboardButtonData("üò¢ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è", "kamni200_off"))
	}

	result := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttons2...),
		tgbotapi.NewInlineKeyboardRow(buttons...),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥", "https://t.me/kamnigravel/7698"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûïüéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑", "add_gift"),
		),
	)

	return &result, nil
}

func ExportCsv(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	// –ù–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ
	event, err := db.Event.FindEventByName("kamni200")
	if err != nil {
		slog.Error("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è: " + err.Error())
		return
	}

	// –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ñ–∞–π–ª—É
	tmpFilePath := fmt.Sprintf("kamni200_%d_%d.csv", event.ID, time.Now().Unix())
	defer os.Remove(tmpFilePath)

	// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CSV
	err = db.UserEvent.ExportEventParticipantsCSV(event.ID, tmpFilePath)
	if err != nil {
		slog.Error("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: " + err.Error())
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV")
		bot.Send(msg)
		return
	}

	// –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
	file, err := os.Open(tmpFilePath)
	if err != nil {
		slog.Error("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: " + err.Error())
		return
	}
	defer file.Close()

	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤
	fileReader := tgbotapi.FileReader{
		Name:   tmpFilePath,
		Reader: file,
	}
	doc := tgbotapi.NewDocument(cfg.AdminChat, fileReader)
	doc.Caption = "–°–ø–∏—Å–æ–∫ –ø–∏—Å–æ–∫"

	if _, err := bot.Send(doc); err != nil {
		slog.Error("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: " + err.Error())
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª")
		bot.Send(msg)
		return
	}
}

func SendNotify(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	if _, err := bot.Send(msg); err != nil {
		slog.Error(err.Error())
	}
}
